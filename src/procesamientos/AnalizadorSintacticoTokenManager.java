/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTokenManager.java */
package procesamientos;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import static asint.Sintaxis.*;

/** Token Manager. */
public class AnalizadorSintacticoTokenManager implements AnalizadorSintacticoConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1c0a7b8350L) != 0L)
         {
            jjmatchedKind = 52;
            return 35;
         }
         if ((active0 & 0x800000L) != 0L)
         {
            jjmatchedKind = 52;
            return 18;
         }
         if ((active0 & 0x1000L) != 0L)
            return 28;
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 52;
            return 9;
         }
         if ((active0 & 0x40400L) != 0L)
         {
            jjmatchedKind = 52;
            return 12;
         }
         if ((active0 & 0x2000L) != 0L)
         {
            jjmatchedKind = 52;
            return 5;
         }
         if ((active0 & 0x4020L) != 0L)
         {
            jjmatchedKind = 52;
            return 22;
         }
         if ((active0 & 0x60000000L) != 0L)
            return 40;
         return -1;
      case 1:
         if ((active0 & 0x40400L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 11;
         }
         if ((active0 & 0x800122100L) != 0L)
            return 35;
         if ((active0 & 0x140be9c270L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 1;
            return 35;
         }
         return -1;
      case 2:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 63;
         }
         if ((active0 & 0x1402a00010L) != 0L)
            return 35;
         if ((active0 & 0x949c660L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
            return 35;
         }
         return -1;
      case 3:
         if ((active0 & 0x1490600L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 3;
            return 35;
         }
         if ((active0 & 0x804c060L) != 0L)
            return 35;
         return -1;
      case 4:
         if ((active0 & 0x400400L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 4;
            return 35;
         }
         if ((active0 & 0x1090200L) != 0L)
            return 35;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 37:
         return jjStopAtPos(0, 33);
      case 40:
         return jjStopAtPos(0, 37);
      case 41:
         return jjStopAtPos(0, 38);
      case 42:
         return jjStopAtPos(0, 31);
      case 43:
         return jjStartNfaWithStates_0(0, 29, 40);
      case 44:
         return jjStopAtPos(0, 42);
      case 45:
         return jjStartNfaWithStates_0(0, 30, 40);
      case 46:
         return jjStopAtPos(0, 44);
      case 47:
         return jjStopAtPos(0, 32);
      case 58:
         return jjStopAtPos(0, 43);
      case 59:
         return jjStopAtPos(0, 41);
      case 61:
         return jjStartNfaWithStates_0(0, 12, 28);
      case 91:
         return jjStopAtPos(0, 39);
      case 93:
         return jjStopAtPos(0, 40);
      case 94:
         return jjStopAtPos(0, 11);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000200L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x420000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x2008000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1008300000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x800000100L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x40L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x40400L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x4020L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x10L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa1_0(0x90000L);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x10L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1e40400L);
      case 70:
      case 102:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(1, 8, 35);
         else if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 35);
         break;
      case 72:
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x14000L);
      case 76:
      case 108:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x402000000L);
      case 79:
      case 111:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(1, 17, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 82:
      case 114:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(1, 35, 35);
         return jjMoveStringLiteralDfa2_0(active0, 0x80240L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 89:
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x20L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L);
      case 68:
      case 100:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(2, 25, 35);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(2, 34, 35);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x90000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x8400000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x20L);
      case 81:
      case 113:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 23, 35);
         break;
      case 82:
      case 114:
         if ((active0 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 4, 35);
         return jjMoveStringLiteralDfa3_0(active0, 0x200L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 84:
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 36, 35);
         break;
      case 87:
      case 119:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(2, 21, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x200L);
      case 67:
      case 99:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(3, 6, 35);
         break;
      case 68:
      case 100:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(3, 18, 35);
         break;
      case 69:
      case 101:
         if ((active0 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(3, 5, 35);
         else if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000L);
      case 76:
      case 108:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 35);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L);
      case 78:
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 35);
         break;
      case 79:
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 16, 35);
         else if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(4, 19, 35);
         break;
      case 78:
      case 110:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(4, 24, 35);
         break;
      case 82:
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
      case 89:
      case 121:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(5, 10, 35);
         break;
      case 69:
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 35);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 63;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 40:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 49)
                        kind = 49;
                     jjCheckNAddTwoStates(44, 49);
                  }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAdd(42);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 48)
                        kind = 48;
                  }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 63:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAddStates(3, 6);
                  }
                  else if ((0x2500L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjAddStates(7, 10);
                  else if ((0x5000000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 48)
                        kind = 48;
                     jjCheckNAddTwoStates(44, 49);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(37, 38);
                  else if (curChar == 33)
                     jjCheckNAdd(28);
                  else if (curChar == 61)
                     jjCheckNAdd(28);
                  if (curChar == 62)
                     jjCheckNAdd(28);
                  else if (curChar == 60)
                     jjCheckNAdd(28);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 2:
                  if ((0xfffffffffffffbffL & l) != 0L)
                     jjAddStates(11, 12);
                  break;
               case 3:
                  if (curChar == 10 && kind > 3)
                     kind = 3;
                  break;
               case 28:
                  if (curChar == 61 && kind > 28)
                     kind = 28;
                  break;
               case 29:
                  if (curChar == 61)
                     jjCheckNAdd(28);
                  break;
               case 30:
                  if (curChar == 33)
                     jjCheckNAdd(28);
                  break;
               case 31:
                  if (curChar == 60)
                     jjCheckNAdd(28);
                  break;
               case 32:
                  if (curChar == 62)
                     jjCheckNAdd(28);
                  break;
               case 33:
                  if ((0x5000000000000000L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 36:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 37:
                  if ((0xffffff7fffffdaffL & l) != 0L)
                     jjCheckNAddTwoStates(37, 38);
                  break;
               case 38:
                  if (curChar == 39 && kind > 53)
                     kind = 53;
                  break;
               case 39:
                  if ((0x280000000000L & l) != 0L)
                     jjAddStates(7, 10);
                  break;
               case 41:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(42);
                  break;
               case 42:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAdd(42);
                  break;
               case 43:
                  if (curChar != 48)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddTwoStates(44, 49);
                  break;
               case 45:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 47);
                  break;
               case 46:
                  if (curChar == 48 && kind > 49)
                     kind = 49;
                  break;
               case 47:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAddStates(13, 18);
                  break;
               case 50:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(50, 51);
                  break;
               case 51:
                  if ((0x3fe000000000000L & l) != 0L && kind > 49)
                     kind = 49;
                  break;
               case 52:
                  if (curChar == 48)
                     jjCheckNAdd(53);
                  break;
               case 54:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(46, 55);
                  break;
               case 55:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAdd(56);
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAdd(53);
                  break;
               case 59:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(0, 2);
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  jjCheckNAddStates(0, 2);
                  break;
               case 61:
                  if (curChar != 48)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddTwoStates(44, 49);
                  break;
               case 62:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 48)
                     kind = 48;
                  jjCheckNAddStates(3, 6);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 12:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(35);
                  }
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 9:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(35);
                  }
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(35);
                  }
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(35);
                  }
                  if ((0x100000001000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  break;
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(35);
                  }
                  else if (curChar == 64)
                     jjCheckNAddTwoStates(2, 3);
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  else if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  else if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 18:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(35);
                  }
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 11:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(35);
                  }
                  if ((0x200000002L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     jjCheckNAdd(35);
                  }
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 1:
                  if (curChar == 64)
                     jjCheckNAddTwoStates(2, 3);
                  break;
               case 2:
                  jjCheckNAddTwoStates(2, 3);
                  break;
               case 4:
                  if ((0x10000000100000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 6:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if ((0x100000001000L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 8:
                  if ((0x800000008000L & l) != 0L)
                     jjCheckNAdd(7);
                  break;
               case 10:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 13:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x8000000080L & l) != 0L && kind > 7)
                     kind = 7;
                  break;
               case 15:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 19:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x2000000020L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 21:
                  if ((0x20000000200000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 23:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if ((0x8000000080000L & l) != 0L)
                     jjCheckNAdd(20);
                  break;
               case 25:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 34:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  jjCheckNAdd(35);
                  break;
               case 37:
                  jjAddStates(19, 20);
                  break;
               case 44:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(21, 23);
                  break;
               case 53:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddStates(24, 26);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(11, 12);
                  break;
               case 37:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(19, 20);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 63 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   60, 44, 49, 42, 60, 44, 49, 40, 41, 43, 59, 2, 3, 46, 50, 51, 
   52, 57, 58, 37, 38, 45, 46, 47, 54, 46, 55, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, "\136", "\75", 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, "\53", "\55", "\52", "\57", "\45", null, null, null, "\50", "\51", 
"\133", "\135", "\73", "\54", "\72", "\56", null, null, null, null, null, null, null, 
null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0x331ffffffffff1L, 
};
static final long[] jjtoSkip = {
   0xeL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[63];
private final int[] jjstateSet = new int[126];
protected char curChar;
/** Constructor. */
public AnalizadorSintacticoTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public AnalizadorSintacticoTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 63; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
