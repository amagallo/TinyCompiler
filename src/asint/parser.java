
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package asint;

import asint.Sintaxis.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Optional;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\146\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\005\002\000\002\005\005\000\002\004\005" +
    "\000\002\006\002\000\002\006\004\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\010\006\000\002" +
    "\011\006\000\002\012\011\000\002\013\002\000\002\013" +
    "\004\000\002\014\002\000\002\014\005\000\002\015\006" +
    "\000\002\016\002\000\002\016\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\020\003\000\002\021\003\000\002\022" +
    "\010\000\002\023\004\000\002\024\005\000\002\025\003" +
    "\000\002\025\004\000\002\026\006\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\027\003\000\002\027\003\000\002\027\003\000\002\027" +
    "\003\000\002\027\003\000\002\027\003\000\002\030\006" +
    "\000\002\031\007\000\002\032\011\000\002\042\002\000" +
    "\002\042\004\000\002\033\010\000\002\043\002\000\002" +
    "\043\003\000\002\041\006\000\002\034\005\000\002\035" +
    "\005\000\002\036\004\000\002\037\005\000\002\040\005" +
    "\000\002\044\002\000\002\044\004\000\002\045\002\000" +
    "\002\045\005\000\002\046\003\000\002\047\003\000\002" +
    "\051\003\000\002\051\003\000\002\052\005\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\054\005" +
    "\000\002\055\005\000\002\056\003\000\002\056\003\000" +
    "\002\056\003\000\002\062\005\000\002\063\005\000\002" +
    "\057\003\000\002\057\003\000\002\060\005\000\002\060" +
    "\005\000\002\060\005\000\002\061\003\000\002\061\003" +
    "\000\002\064\004\000\002\064\004\000\002\065\003\000" +
    "\002\065\003\000\002\065\003\000\002\050\003\000\002" +
    "\050\003\000\002\050\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\067\005\000\002\066\003" +
    "\000\002\066\003\000\002\066\003\000\002\070\006\000" +
    "\002\072\005\000\002\071\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\012\005\ufffe\010\ufffe\011\ufffe\012\ufffe\001" +
    "\002\000\004\005\067\001\002\000\004\002\255\001\002" +
    "\000\012\005\uffff\010\007\011\014\012\013\001\002\000" +
    "\004\043\252\001\002\000\004\007\ufff7\001\002\000\004" +
    "\007\ufff8\001\002\000\004\007\251\001\002\000\004\043" +
    "\051\001\002\000\004\043\016\001\002\000\004\007\ufff9" +
    "\001\002\000\004\013\017\001\002\000\014\015\022\023" +
    "\030\024\031\025\032\043\026\001\002\000\004\007\ufff5" +
    "\001\002\000\010\007\uffe9\014\uffe9\017\uffe9\001\002\000" +
    "\004\020\044\001\002\000\010\007\uffec\014\uffec\017\uffec" +
    "\001\002\000\010\007\uffeb\014\uffeb\017\uffeb\001\002\000" +
    "\010\007\uffe8\014\uffe8\017\uffe8\001\002\000\010\007\uffe6" +
    "\014\uffe6\017\uffe6\001\002\000\010\007\uffea\014\uffea\017" +
    "\uffea\001\002\000\010\007\uffe7\014\uffe7\017\uffe7\001\002" +
    "\000\014\015\022\023\030\024\031\025\032\043\026\001" +
    "\002\000\004\043\033\001\002\000\004\013\040\001\002" +
    "\000\006\006\uffe2\043\033\001\002\000\004\006\036\001" +
    "\002\000\010\007\uffe3\014\uffe3\017\uffe3\001\002\000\004" +
    "\006\uffe1\001\002\000\014\015\022\023\030\024\031\025" +
    "\032\043\026\001\002\000\004\007\042\001\002\000\006" +
    "\006\uffe0\043\uffe0\001\002\000\010\007\uffe4\014\uffe4\017" +
    "\uffe4\001\002\000\004\044\045\001\002\000\004\021\046" +
    "\001\002\000\004\022\047\001\002\000\014\015\022\023" +
    "\030\024\031\025\032\043\026\001\002\000\010\007\uffe5" +
    "\014\uffe5\017\uffe5\001\002\000\004\016\052\001\002\000" +
    "\010\010\ufff1\017\ufff3\043\ufff1\001\002\000\004\017\064" +
    "\001\002\000\006\010\055\043\uffee\001\002\000\004\043" +
    "\uffed\001\002\000\004\043\061\001\002\000\006\014\060" +
    "\017\ufff2\001\002\000\006\010\ufff0\043\ufff0\001\002\000" +
    "\004\013\062\001\002\000\014\015\022\023\030\024\031" +
    "\025\032\043\026\001\002\000\006\014\uffef\017\uffef\001" +
    "\002\000\012\005\ufffe\010\ufffe\011\ufffe\012\ufffe\001\002" +
    "\000\004\005\067\001\002\000\004\007\ufff4\001\002\000" +
    "\046\006\ufffb\016\ufffb\027\ufffb\032\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\055\ufffb\060\ufffb\001\002" +
    "\000\046\006\144\016\135\027\115\032\142\034\072\035" +
    "\136\036\105\037\137\040\121\041\106\042\123\043\116" +
    "\044\100\045\133\046\126\047\145\055\103\060\107\001" +
    "\002\000\050\006\uffdf\016\uffdf\027\uffdf\031\uffdf\032\uffdf" +
    "\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\041\uffdf\042" +
    "\uffdf\043\uffdf\044\uffdf\045\uffdf\046\uffdf\047\uffdf\055\uffdf" +
    "\060\uffdf\001\002\000\012\005\ufffe\010\ufffe\011\ufffe\012" +
    "\ufffe\001\002\000\030\007\uffb8\014\uffb8\016\uffb8\017\uffb8" +
    "\021\uffb8\026\uffb8\030\uffb8\033\uffb8\050\uffb8\051\uffb8\055" +
    "\uffb8\001\002\000\050\006\uffdb\016\uffdb\027\uffdb\031\uffdb" +
    "\032\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb\041" +
    "\uffdb\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\047\uffdb" +
    "\055\uffdb\060\uffdb\001\002\000\042\007\uffaf\014\uffaf\016" +
    "\uffaf\017\uffaf\021\uffaf\026\uffaf\030\uffaf\033\uffaf\050\uffaf" +
    "\051\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\057" +
    "\uffaf\001\002\000\050\004\uffa0\007\uffa0\014\uffa0\016\uffa0" +
    "\017\uffa0\020\uffa0\021\uffa0\024\uffa0\026\uffa0\030\uffa0\033" +
    "\uffa0\050\uffa0\051\uffa0\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\001\002\000\050\004\uff9f\007\uff9f\014" +
    "\uff9f\016\uff9f\017\uff9f\020\uff9f\021\uff9f\024\uff9f\026\uff9f" +
    "\030\uff9f\033\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\054" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\001\002\000\050\004\uffa8" +
    "\007\uffa8\014\uffa8\016\uffa8\017\uffa8\020\uffa8\021\uffa8\024" +
    "\uffa8\026\uffa8\030\uffa8\033\uffa8\050\uffa8\051\uffa8\052\uffa8" +
    "\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8\001\002\000" +
    "\026\007\uffbd\014\uffbd\016\uffbd\017\uffbd\021\uffbd\026\uffbd" +
    "\030\uffbd\033\uffbd\050\uffbd\055\uffbd\001\002\000\050\006" +
    "\uffd7\016\uffd7\027\uffd7\031\uffd7\032\uffd7\034\uffd7\035\uffd7" +
    "\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043\uffd7\044" +
    "\uffd7\045\uffd7\046\uffd7\047\uffd7\055\uffd7\060\uffd7\001\002" +
    "\000\020\016\135\042\123\043\116\044\100\045\133\046" +
    "\126\047\145\001\002\000\050\006\uffde\016\uffde\027\uffde" +
    "\031\uffde\032\uffde\034\uffde\035\uffde\036\uffde\037\uffde\040" +
    "\uffde\041\uffde\042\uffde\043\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\055\uffde\060\uffde\001\002\000\024\016\135\042" +
    "\123\043\116\044\100\045\133\046\126\047\145\055\103" +
    "\060\107\001\002\000\024\016\135\042\123\043\116\044" +
    "\100\045\133\046\126\047\145\055\103\060\107\001\002" +
    "\000\020\016\135\042\123\043\116\044\100\045\133\046" +
    "\126\047\145\001\002\000\050\004\uffa9\007\uffa9\014\uffa9" +
    "\016\uffa9\017\uffa9\020\uffa9\021\uffa9\024\uffa9\026\uffa9\030" +
    "\uffa9\033\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9" +
    "\055\uffa9\056\uffa9\057\uffa9\001\002\000\050\004\uffa1\007" +
    "\uffa1\014\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\024\uffa1" +
    "\026\uffa1\030\uffa1\033\uffa1\050\uffa1\051\uffa1\052\uffa1\053" +
    "\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\001\002\000\050" +
    "\004\uffaa\007\uffaa\014\uffaa\016\uffaa\017\uffaa\020\uffaa\021" +
    "\uffaa\024\uffaa\026\uffaa\030\uffaa\033\uffaa\050\uffaa\051\uffaa" +
    "\052\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\057\uffaa\001" +
    "\002\000\050\006\uffdc\016\uffdc\027\uffdc\031\uffdc\032\uffdc" +
    "\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040\uffdc\041\uffdc\042" +
    "\uffdc\043\uffdc\044\uffdc\045\uffdc\046\uffdc\047\uffdc\055\uffdc" +
    "\060\uffdc\001\002\000\050\006\ufffa\016\ufffa\027\ufffa\031" +
    "\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa" +
    "\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047" +
    "\ufffa\055\ufffa\060\ufffa\001\002\000\024\016\135\042\123" +
    "\043\116\044\100\045\133\046\126\047\145\055\103\060" +
    "\107\001\002\000\050\004\uffa5\007\uffa5\014\uffa5\016\uffa5" +
    "\017\uffa5\020\uffa5\021\uffa5\024\uffa5\026\uffa5\030\uffa5\033" +
    "\uffa5\050\uffa5\051\uffa5\052\uffa5\053\uffa5\054\uffa5\055\uffa5" +
    "\056\uffa5\057\uffa5\001\002\000\030\007\uffb9\014\uffb9\016" +
    "\uffb9\017\uffb9\021\uffb9\026\uffb9\030\uffb9\033\uffb9\050\uffb9" +
    "\051\uffb9\055\uffb9\001\002\000\050\004\222\007\uffae\014" +
    "\uffae\016\uffae\017\uffae\020\224\021\uffae\024\223\026\uffae" +
    "\030\uffae\033\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054" +
    "\uffae\055\uffae\056\uffae\057\uffae\001\002\000\024\016\135" +
    "\042\123\043\116\044\100\045\133\046\126\047\145\055" +
    "\103\060\107\001\002\000\042\007\uffb3\014\uffb3\016\uffb3" +
    "\017\uffb3\021\uffb3\026\uffb3\030\uffb3\033\uffb3\050\uffb3\051" +
    "\uffb3\052\uffb3\053\uffb3\054\uffb3\055\uffb3\056\uffb3\057\uffb3" +
    "\001\002\000\050\004\uffa3\007\uffa3\014\uffa3\016\uffa3\017" +
    "\uffa3\020\uffa3\021\uffa3\024\uffa3\026\uffa3\030\uffa3\033\uffa3" +
    "\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\057\uffa3\001\002\000\042\007\uffb7\014\uffb7\016\uffb7" +
    "\017\uffb7\021\uffb7\026\uffb7\030\uffb7\033\uffb7\050\uffb7\051" +
    "\uffb7\052\207\053\212\054\206\055\uffb7\056\210\057\211" +
    "\001\002\000\030\007\uffbc\014\uffbc\016\uffbc\017\uffbc\021" +
    "\uffbc\026\uffbc\030\uffbc\033\uffbc\050\uffbc\051\204\055\uffbc" +
    "\001\002\000\050\004\uffa6\007\uffa6\014\uffa6\016\uffa6\017" +
    "\uffa6\020\uffa6\021\uffa6\024\uffa6\026\uffa6\030\uffa6\033\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\055\uffa6\056" +
    "\uffa6\057\uffa6\001\002\000\026\007\uffc0\014\uffc0\016\uffc0" +
    "\017\uffc0\021\uffc0\026\uffc0\030\uffc0\033\uffc0\050\201\055" +
    "\200\001\002\000\050\006\uffd6\016\uffd6\027\uffd6\031\uffd6" +
    "\032\uffd6\034\uffd6\035\uffd6\036\uffd6\037\uffd6\040\uffd6\041" +
    "\uffd6\042\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6" +
    "\055\uffd6\060\uffd6\001\002\000\022\007\uffc2\014\uffc2\016" +
    "\uffc2\017\uffc2\021\uffc2\026\uffc2\030\uffc2\033\uffc2\001\002" +
    "\000\050\006\uffda\016\uffda\027\uffda\031\uffda\032\uffda\034" +
    "\uffda\035\uffda\036\uffda\037\uffda\040\uffda\041\uffda\042\uffda" +
    "\043\uffda\044\uffda\045\uffda\046\uffda\047\uffda\055\uffda\060" +
    "\uffda\001\002\000\050\004\uffa7\007\uffa7\014\uffa7\016\uffa7" +
    "\017\uffa7\020\uffa7\021\uffa7\024\uffa7\026\uffa7\030\uffa7\033" +
    "\uffa7\050\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7" +
    "\056\uffa7\057\uffa7\001\002\000\050\006\uffdd\016\uffdd\027" +
    "\uffdd\031\uffdd\032\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd" +
    "\040\uffdd\041\uffdd\042\uffdd\043\uffdd\044\uffdd\045\uffdd\046" +
    "\uffdd\047\uffdd\055\uffdd\060\uffdd\001\002\000\024\016\135" +
    "\042\123\043\116\044\100\045\133\046\126\047\145\055" +
    "\103\060\107\001\002\000\024\016\135\042\123\043\116" +
    "\044\100\045\133\046\126\047\145\055\103\060\107\001" +
    "\002\000\004\007\173\001\002\000\026\007\uffbe\014\uffbe" +
    "\016\uffbe\017\uffbe\021\uffbe\026\uffbe\030\uffbe\033\uffbe\050" +
    "\uffbe\055\uffbe\001\002\000\050\006\uffd8\016\uffd8\027\uffd8" +
    "\031\uffd8\032\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\040" +
    "\uffd8\041\uffd8\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8" +
    "\047\uffd8\055\uffd8\060\uffd8\001\002\000\024\016\135\042" +
    "\123\043\116\044\100\045\133\046\126\047\145\055\103" +
    "\060\107\001\002\000\050\006\uffd9\016\uffd9\027\uffd9\031" +
    "\uffd9\032\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\040\uffd9" +
    "\041\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\047" +
    "\uffd9\055\uffd9\060\uffd9\001\002\000\054\004\ufffc\006\ufffc" +
    "\007\ufffc\016\ufffc\027\ufffc\031\ufffc\032\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\047\ufffc\055\ufffc\060\ufffc\001" +
    "\002\000\050\004\uffa4\007\uffa4\014\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\024\uffa4\026\uffa4\030\uffa4\033\uffa4\050" +
    "\uffa4\051\uffa4\052\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\057\uffa4\001\002\000\042\007\uffb4\014\uffb4\016\uffb4\017" +
    "\uffb4\021\uffb4\026\uffb4\030\uffb4\033\uffb4\050\uffb4\051\uffb4" +
    "\052\uffb4\053\uffb4\054\uffb4\055\uffb4\056\uffb4\057\uffb4\001" +
    "\002\000\022\007\uffc1\014\uffc1\016\uffc1\017\uffc1\021\uffc1" +
    "\026\uffc1\030\uffc1\033\uffc1\001\002\000\006\016\152\026" +
    "\153\001\002\000\050\004\uffab\007\uffab\014\uffab\016\uffab" +
    "\017\uffab\020\uffab\021\uffab\024\uffab\026\uffab\030\uffab\033" +
    "\uffab\050\uffab\051\uffab\052\uffab\053\uffab\054\uffab\055\uffab" +
    "\056\uffab\057\uffab\001\002\000\026\016\uffc5\017\uffc7\042" +
    "\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047\uffc5\055\uffc5" +
    "\060\uffc5\001\002\000\024\016\135\042\123\043\116\044" +
    "\100\045\133\046\126\047\145\055\103\060\107\001\002" +
    "\000\004\007\155\001\002\000\050\006\uffd5\016\uffd5\027" +
    "\uffd5\031\uffd5\032\uffd5\034\uffd5\035\uffd5\036\uffd5\037\uffd5" +
    "\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\055\uffd5\060\uffd5\001\002\000\024\016\135" +
    "\042\123\043\116\044\100\045\133\046\126\047\145\055" +
    "\103\060\107\001\002\000\004\017\160\001\002\000\004" +
    "\007\161\001\002\000\050\006\uffd4\016\uffd4\027\uffd4\031" +
    "\uffd4\032\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\040\uffd4" +
    "\041\uffd4\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\047" +
    "\uffd4\055\uffd4\060\uffd4\001\002\000\006\014\164\017\uffc6" +
    "\001\002\000\006\014\uffc3\017\uffc3\001\002\000\024\016" +
    "\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\047\uffc4" +
    "\055\uffc4\060\uffc4\001\002\000\004\033\166\001\002\000" +
    "\046\006\ufffb\016\ufffb\027\ufffb\032\ufffb\034\ufffb\035\ufffb" +
    "\036\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\055\ufffb\060\ufffb\001\002" +
    "\000\046\006\170\016\135\027\115\032\142\034\072\035" +
    "\136\036\105\037\137\040\121\041\106\042\123\043\116" +
    "\044\100\045\133\046\126\047\145\055\103\060\107\001" +
    "\002\000\052\006\uffcf\007\172\016\uffcf\027\uffcf\031\uffcf" +
    "\032\uffcf\034\uffcf\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf" +
    "\055\uffcf\060\uffcf\001\002\000\050\006\uffd0\016\uffd0\027" +
    "\uffd0\031\uffd0\032\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0" +
    "\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\046" +
    "\uffd0\047\uffd0\055\uffd0\060\uffd0\001\002\000\050\006\uffce" +
    "\016\uffce\027\uffce\031\uffce\032\uffce\034\uffce\035\uffce\036" +
    "\uffce\037\uffce\040\uffce\041\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\046\uffce\047\uffce\055\uffce\060\uffce\001\002\000" +
    "\050\006\uffca\016\uffca\027\uffca\031\uffca\032\uffca\034\uffca" +
    "\035\uffca\036\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043" +
    "\uffca\044\uffca\045\uffca\046\uffca\047\uffca\055\uffca\060\uffca" +
    "\001\002\000\004\007\175\001\002\000\050\006\uffcc\016" +
    "\uffcc\027\uffcc\031\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045" +
    "\uffcc\046\uffcc\047\uffcc\055\uffcc\060\uffcc\001\002\000\004" +
    "\017\177\001\002\000\050\004\uffa2\007\uffa2\014\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\024\uffa2\026\uffa2\030\uffa2" +
    "\033\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2\054\uffa2\055" +
    "\uffa2\056\uffa2\057\uffa2\001\002\000\024\016\135\042\123" +
    "\043\116\044\100\045\133\046\126\047\145\055\103\060" +
    "\107\001\002\000\024\016\135\042\123\043\116\044\100" +
    "\045\133\046\126\047\145\055\103\060\107\001\002\000" +
    "\024\007\uffbf\014\uffbf\016\uffbf\017\uffbf\021\uffbf\026\uffbf" +
    "\030\uffbf\033\uffbf\055\200\001\002\000\026\007\uffba\014" +
    "\uffba\016\uffba\017\uffba\021\uffba\026\uffba\030\uffba\033\uffba" +
    "\050\uffba\055\uffba\001\002\000\024\016\135\042\123\043" +
    "\116\044\100\045\133\046\126\047\145\055\103\060\107" +
    "\001\002\000\026\007\uffbb\014\uffbb\016\uffbb\017\uffbb\021" +
    "\uffbb\026\uffbb\030\uffbb\033\uffbb\050\uffbb\055\uffbb\001\002" +
    "\000\024\016\135\042\123\043\116\044\100\045\133\046" +
    "\126\047\145\055\103\060\107\001\002\000\024\016\135" +
    "\042\123\043\116\044\100\045\133\046\126\047\145\055" +
    "\103\060\107\001\002\000\024\016\135\042\123\043\116" +
    "\044\100\045\133\046\126\047\145\055\103\060\107\001" +
    "\002\000\024\016\135\042\123\043\116\044\100\045\133" +
    "\046\126\047\145\055\103\060\107\001\002\000\024\016" +
    "\135\042\123\043\116\044\100\045\133\046\126\047\145" +
    "\055\103\060\107\001\002\000\030\007\uffb5\014\uffb5\016" +
    "\uffb5\017\uffb5\021\uffb5\026\uffb5\030\uffb5\033\uffb5\050\uffb5" +
    "\051\uffb5\055\uffb5\001\002\000\042\007\uffb1\014\uffb1\016" +
    "\uffb1\017\uffb1\021\uffb1\026\uffb1\030\uffb1\033\uffb1\050\uffb1" +
    "\051\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1\057" +
    "\uffb1\001\002\000\042\007\uffb2\014\uffb2\016\uffb2\017\uffb2" +
    "\021\uffb2\026\uffb2\030\uffb2\033\uffb2\050\uffb2\051\uffb2\052" +
    "\uffb2\053\uffb2\054\uffb2\055\uffb2\056\uffb2\057\uffb2\001\002" +
    "\000\036\007\uffb6\014\uffb6\016\uffb6\017\uffb6\021\uffb6\026" +
    "\uffb6\030\uffb6\033\uffb6\050\uffb6\051\uffb6\054\206\055\uffb6" +
    "\056\210\057\211\001\002\000\042\007\uffb0\014\uffb0\016" +
    "\uffb0\017\uffb0\021\uffb0\026\uffb0\030\uffb0\033\uffb0\050\uffb0" +
    "\051\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\057" +
    "\uffb0\001\002\000\004\007\221\001\002\000\050\006\uffc9" +
    "\016\uffc9\027\uffc9\031\uffc9\032\uffc9\034\uffc9\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9" +
    "\045\uffc9\046\uffc9\047\uffc9\055\uffc9\060\uffc9\001\002\000" +
    "\004\043\227\001\002\000\050\004\uff9c\007\uff9c\014\uff9c" +
    "\016\uff9c\017\uff9c\020\uff9c\021\uff9c\024\uff9c\026\uff9c\030" +
    "\uff9c\033\uff9c\050\uff9c\051\uff9c\052\uff9c\053\uff9c\054\uff9c" +
    "\055\uff9c\056\uff9c\057\uff9c\001\002\000\024\016\135\042" +
    "\123\043\116\044\100\045\133\046\126\047\145\055\103" +
    "\060\107\001\002\000\004\021\226\001\002\000\050\004" +
    "\uff9e\007\uff9e\014\uff9e\016\uff9e\017\uff9e\020\uff9e\021\uff9e" +
    "\024\uff9e\026\uff9e\030\uff9e\033\uff9e\050\uff9e\051\uff9e\052" +
    "\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\001\002" +
    "\000\050\004\uff9d\007\uff9d\014\uff9d\016\uff9d\017\uff9d\020" +
    "\uff9d\021\uff9d\024\uff9d\026\uff9d\030\uff9d\033\uff9d\050\uff9d" +
    "\051\uff9d\052\uff9d\053\uff9d\054\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\001\002\000\004\030\231\001\002\000\050\006\ufffb" +
    "\016\ufffb\027\ufffb\031\ufffb\032\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\055\ufffb\060\ufffb\001\002\000" +
    "\050\006\uffd2\016\135\027\115\031\234\032\142\034\072" +
    "\035\136\036\105\037\137\040\121\041\106\042\123\043" +
    "\116\044\100\045\133\046\126\047\145\055\103\060\107" +
    "\001\002\000\004\006\236\001\002\000\046\006\ufffb\016" +
    "\ufffb\027\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\047\ufffb\055\ufffb\060\ufffb\001\002\000\046\006\uffd1" +
    "\016\135\027\115\032\142\034\072\035\136\036\105\037" +
    "\137\040\121\041\106\042\123\043\116\044\100\045\133" +
    "\046\126\047\145\055\103\060\107\001\002\000\052\006" +
    "\uffcf\007\172\016\uffcf\027\uffcf\031\uffcf\032\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043" +
    "\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\055\uffcf\060\uffcf" +
    "\001\002\000\050\006\uffd3\016\uffd3\027\uffd3\031\uffd3\032" +
    "\uffd3\034\uffd3\035\uffd3\036\uffd3\037\uffd3\040\uffd3\041\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\055" +
    "\uffd3\060\uffd3\001\002\000\050\004\222\007\uffac\014\uffac" +
    "\016\uffac\017\uffac\020\224\021\uffac\024\223\026\uffac\030" +
    "\uffac\033\uffac\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac" +
    "\055\uffac\056\uffac\057\uffac\001\002\000\004\007\242\001" +
    "\002\000\050\006\uffc8\016\uffc8\027\uffc8\031\uffc8\032\uffc8" +
    "\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041\uffc8\042" +
    "\uffc8\043\uffc8\044\uffc8\045\uffc8\046\uffc8\047\uffc8\055\uffc8" +
    "\060\uffc8\001\002\000\004\007\244\001\002\000\050\006" +
    "\uffcb\016\uffcb\027\uffcb\031\uffcb\032\uffcb\034\uffcb\035\uffcb" +
    "\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb\044" +
    "\uffcb\045\uffcb\046\uffcb\047\uffcb\055\uffcb\060\uffcb\001\002" +
    "\000\050\004\222\007\uffad\014\uffad\016\uffad\017\uffad\020" +
    "\224\021\uffad\024\223\026\uffad\030\uffad\033\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\055\uffad\056\uffad\057" +
    "\uffad\001\002\000\004\005\067\001\002\000\052\006\uffcf" +
    "\007\172\016\uffcf\027\uffcf\031\uffcf\032\uffcf\034\uffcf\035" +
    "\uffcf\036\uffcf\037\uffcf\040\uffcf\041\uffcf\042\uffcf\043\uffcf" +
    "\044\uffcf\045\uffcf\046\uffcf\047\uffcf\055\uffcf\060\uffcf\001" +
    "\002\000\050\006\uffcd\016\uffcd\027\uffcd\031\uffcd\032\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042" +
    "\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd\047\uffcd\055\uffcd" +
    "\060\uffcd\001\002\000\012\005\ufffd\010\ufffd\011\ufffd\012" +
    "\ufffd\001\002\000\004\013\253\001\002\000\014\015\022" +
    "\023\030\024\031\025\032\043\026\001\002\000\004\007" +
    "\ufff6\001\002\000\004\002\001\001\002\000\004\004\257" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\255\000\010\002\004\003\003\005\005\001\001\000" +
    "\004\004\255\001\001\000\002\001\001\000\012\007\011" +
    "\010\014\011\010\012\007\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\017\020\022\021\023\022\026\023\024" +
    "\024\020\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\017\042\020\022\021\023\022\026\023\024" +
    "\024\020\001\001\000\006\025\034\026\033\001\001\000" +
    "\002\001\001\000\006\025\036\026\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\040\020\022\021\023\022\026\023\024\024\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\047\020\022\021\023\022\026\023\024\024\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\052" +
    "\014\053\001\001\000\002\001\001\000\006\015\056\016" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\017" +
    "\062\020\022\021\023\022\026\023\024\024\020\001\001" +
    "\000\002\001\001\000\006\003\064\005\005\001\001\000" +
    "\004\004\065\001\001\000\002\001\001\000\004\006\067" +
    "\001\001\000\100\027\113\030\070\031\103\032\133\033" +
    "\112\034\073\035\131\036\142\037\140\040\101\041\127" +
    "\047\147\050\107\051\130\052\146\053\126\054\137\055" +
    "\100\056\124\057\123\060\145\061\121\062\116\063\072" +
    "\064\074\065\117\066\111\067\150\070\110\071\076\072" +
    "\075\001\001\000\002\001\001\000\006\003\245\005\005" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\050\107\065" +
    "\244\066\111\067\150\070\110\071\076\072\075\001\001" +
    "\000\002\001\001\000\052\047\242\050\107\051\130\052" +
    "\146\053\126\054\137\055\100\056\124\057\123\060\145" +
    "\061\121\062\116\063\072\064\074\065\117\066\111\067" +
    "\150\070\110\071\076\072\075\001\001\000\052\047\240" +
    "\050\107\051\130\052\146\053\126\054\137\055\100\056" +
    "\124\057\123\060\145\061\121\062\116\063\072\064\074" +
    "\065\117\066\111\067\150\070\110\071\076\072\075\001" +
    "\001\000\020\050\107\065\237\066\111\067\150\070\110" +
    "\071\076\072\075\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\052\047\227\050\107\051\130\052\146\053\126\054" +
    "\137\055\100\056\124\057\123\060\145\061\121\062\116" +
    "\063\072\064\074\065\117\066\111\067\150\070\110\071" +
    "\076\072\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\052\047\217\050\107\051\130\052" +
    "\146\053\126\054\137\055\100\056\124\057\123\060\145" +
    "\061\121\062\116\063\072\064\074\065\117\066\111\067" +
    "\150\070\110\071\076\072\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\050\050\107\051\175\052\146\053\126\054\137" +
    "\055\100\056\124\057\123\060\145\061\121\062\116\063" +
    "\072\064\074\065\117\066\111\067\150\070\110\071\076" +
    "\072\075\001\001\000\052\047\173\050\107\051\130\052" +
    "\146\053\126\054\137\055\100\056\124\057\123\060\145" +
    "\061\121\062\116\063\072\064\074\065\117\066\111\067" +
    "\150\070\110\071\076\072\075\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\052\047\164\050" +
    "\107\051\130\052\146\053\126\054\137\055\100\056\124" +
    "\057\123\060\145\061\121\062\116\063\072\064\074\065" +
    "\117\066\111\067\150\070\110\071\076\072\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\044\156\045\155\001\001\000\052\047" +
    "\153\050\107\051\130\052\146\053\126\054\137\055\100" +
    "\056\124\057\123\060\145\061\121\062\116\063\072\064" +
    "\074\065\117\066\111\067\150\070\110\071\076\072\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\054\046" +
    "\161\047\162\050\107\051\130\052\146\053\126\054\137" +
    "\055\100\056\124\057\123\060\145\061\121\062\116\063" +
    "\072\064\074\065\117\066\111\067\150\070\110\071\076" +
    "\072\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\166\001\001\000" +
    "\100\027\113\030\070\031\103\032\133\033\112\034\073" +
    "\035\131\036\142\037\140\040\101\041\127\047\147\050" +
    "\107\051\130\052\146\053\126\054\137\055\100\056\124" +
    "\057\123\060\145\061\121\062\116\063\072\064\074\065" +
    "\117\066\111\067\150\070\110\071\076\072\075\001\001" +
    "\000\004\043\170\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\050\107\056" +
    "\202\057\123\060\145\061\121\062\116\063\072\064\074" +
    "\065\117\066\111\067\150\070\110\071\076\072\075\001" +
    "\001\000\044\050\107\053\201\054\137\055\100\056\124" +
    "\057\123\060\145\061\121\062\116\063\072\064\074\065" +
    "\117\066\111\067\150\070\110\071\076\072\075\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\050\107\056" +
    "\204\057\123\060\145\061\121\062\116\063\072\064\074" +
    "\065\117\066\111\067\150\070\110\071\076\072\075\001" +
    "\001\000\002\001\001\000\024\050\107\061\216\064\074" +
    "\065\117\066\111\067\150\070\110\071\076\072\075\001" +
    "\001\000\030\050\107\057\215\060\145\061\121\064\074" +
    "\065\117\066\111\067\150\070\110\071\076\072\075\001" +
    "\001\000\024\050\107\061\214\064\074\065\117\066\111" +
    "\067\150\070\110\071\076\072\075\001\001\000\024\050" +
    "\107\061\213\064\074\065\117\066\111\067\150\070\110" +
    "\071\076\072\075\001\001\000\036\050\107\056\212\057" +
    "\123\060\145\061\121\062\116\063\072\064\074\065\117" +
    "\066\111\067\150\070\110\071\076\072\075\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\052\047\224" +
    "\050\107\051\130\052\146\053\126\054\137\055\100\056" +
    "\124\057\123\060\145\061\121\062\116\063\072\064\074" +
    "\065\117\066\111\067\150\070\110\071\076\072\075\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\231\001\001\000\102\027" +
    "\113\030\070\031\103\032\133\033\112\034\073\035\131" +
    "\036\142\037\140\040\101\041\127\042\232\047\147\050" +
    "\107\051\130\052\146\053\126\054\137\055\100\056\124" +
    "\057\123\060\145\061\121\062\116\063\072\064\074\065" +
    "\117\066\111\067\150\070\110\071\076\072\075\001\001" +
    "\000\002\001\001\000\004\006\234\001\001\000\100\027" +
    "\113\030\070\031\103\032\133\033\112\034\073\035\131" +
    "\036\142\037\140\040\101\041\127\047\147\050\107\051" +
    "\130\052\146\053\126\054\137\055\100\056\124\057\123" +
    "\060\145\061\121\062\116\063\072\064\074\065\117\066" +
    "\111\067\150\070\110\071\076\072\075\001\001\000\004" +
    "\043\236\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\246\001\001\000" +
    "\004\043\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\017\253\020\022\021\023\022" +
    "\026\023\024\024\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Prog ::= SeccionDecs SeccionIns PUNTO 
            {
              Prog RESULT =null;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Dec> decs = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Prog(decs, ins, new Nodo(1, 1)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SeccionDecs ::= LDec 
            {
              List<Dec> RESULT =null;
		int ldecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ldecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Dec> ldec = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Collections.unmodifiableList(ldec); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SeccionDecs",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDec ::= 
            {
              List<Dec> RESULT =null;
		 RESULT = new ArrayList<Dec>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDec ::= LDec Dec PUNTO_COMA 
            {
              List<Dec> RESULT =null;
		int ldecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ldecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Dec> ldec = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ldec.add(dec);
    RESULT = ldec;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LDec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SeccionIns ::= BEGIN LIns END 
            {
              List<Ins> RESULT =null;
		int linsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Ins> lins = (List<Ins>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = Collections.unmodifiableList(lins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("SeccionIns",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LIns ::= 
            {
              List<Ins> RESULT =null;
		 RESULT = new ArrayList<Ins>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIns",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LIns ::= LIns Ins 
            {
              List<Ins> RESULT =null;
		int linsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int linsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Ins> lins = (List<Ins>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    lins.add(ins);
    RESULT = lins;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LIns",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= DecVar 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Dec ::= DecTipo 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Dec ::= DecProc 
            {
              Dec RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = dec; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Dec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // DecVar ::= VAR ID DOS_PUNTOS Tipo 
            {
              Dec RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Strloc var = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc id = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Var(id.str(), tipo, new Nodo(var.linea(), var.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecVar",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DecTipo ::= TIPO ID DOS_PUNTOS Tipo 
            {
              Dec RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Strloc type = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc id = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Type(id.str(), tipo, new Nodo(type.linea(), type.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecTipo",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DecProc ::= PROC ID PAPERTURA PFormales PCIERRE SeccionDecs SeccionIns 
            {
              Dec RESULT =null;
		int procleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int procright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Strloc proc = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Strloc id = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pformalesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pformalesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Param> pformales = (List<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Dec> decs = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Proc(id.str(), pformales, decs, ins, new Nodo(proc.linea(), proc.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DecProc",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // PFormales ::= 
            {
              List<Param> RESULT =null;
		 RESULT = List.of(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFormales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // PFormales ::= LParam PFormal 
            {
              List<Param> RESULT =null;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Param> lparam = (List<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    lparam.add(param);
    RESULT = Collections.unmodifiableList(lparam);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFormales",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LParam ::= 
            {
              List<Param> RESULT =null;
		 RESULT = new ArrayList<Param>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LParam",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LParam ::= LParam PFormal COMA 
            {
              List<Param> RESULT =null;
		int lparamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lparamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Param> lparam = (List<Param>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    lparam.add(param);
    RESULT = lparam;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LParam",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // PFormal ::= VarOpc ID DOS_PUNTOS Tipo 
            {
              Param RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Optional<Strloc> var = (Optional<Strloc>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc id = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = var.isPresent()? new Pvar(id.str(), tipo, new Nodo(var.get().linea(), var.get().col())):
        new Pval(id.str(), tipo, new Nodo(id.linea(), id.col()));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PFormal",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarOpc ::= 
            {
              Optional<Strloc> RESULT =null;
		 RESULT = Optional.empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarOpc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarOpc ::= VAR 
            {
              Optional<Strloc> RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc var = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Optional.of(var); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarOpc",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= TipoBasico 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= TipoRenombrado 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= TipoArray 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= TipoRegistro 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= TipoPuntero 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tipo; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Tipo",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TipoBasico ::= TIPO_BASICO 
            {
              Tipo RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc tipo = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(tipo.linea(), tipo.col());
    RESULT = switch (tipo.str())
    {
        case "int" -> new Int(nodo);
        case "real" -> new Real(nodo);
        case "bool" -> new Bool(nodo);
        default -> new Str(nodo); /* case "string" */
    };

              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoBasico",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TipoRenombrado ::= ID 
            {
              Tipo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc id = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ref(id.str(), new Nodo(id.linea(), id.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoRenombrado",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TipoArray ::= ARRAY CAPERTURA ENTERO CCIERRE OF Tipo 
            {
              Tipo RESULT =null;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Strloc array = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int tamleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tamright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Strloc tam = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo base = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Array(base, tam.str(), new Nodo(array.linea(), array.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoArray",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TipoPuntero ::= PUNTERO Tipo 
            {
              Tipo RESULT =null;
		int puntleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int puntright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc punt = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int baseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int baseright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Tipo base = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Puntero(base, new Nodo(punt.linea(), punt.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoPuntero",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TipoRegistro ::= REGISTRO LCampo END 
            {
              Tipo RESULT =null;
		int regleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int regright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc reg = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lcampoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lcamporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Campo> lcampo = (List<Campo>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Reg(Collections.unmodifiableList(lcampo), new Nodo(reg.linea(), reg.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TipoRegistro",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LCampo ::= Campo 
            {
              List<Campo> RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List<Campo> lcampo = new ArrayList<Campo>();
    lcampo.add(campo);
    RESULT = lcampo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCampo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LCampo ::= Campo LCampo 
            {
              List<Campo> RESULT =null;
		int campoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int camporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lcampoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lcamporight = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Campo> lcampo = (List<Campo>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    lcampo.add(campo);
    RESULT = lcampo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LCampo",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Campo ::= ID DOS_PUNTOS Tipo PUNTO_COMA 
            {
              Campo RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Strloc id = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Campo(id.str(), tipo, new Nodo(id.linea(), id.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Campo",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ins ::= Asig 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ins ::= Invoc 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ins ::= Condicional 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ins ::= While 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ins ::= Lectura 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ins ::= Escritura 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ins ::= NewLine 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ins ::= New 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ins ::= Delete 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Ins ::= Compuesta 
            {
              Ins RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = ins; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Ins",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Asig ::= Expresion ASIG Expresion PUNTO_COMA 
            {
              Ins RESULT =null;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp ei = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int asigleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc asig = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int edleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int edright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp ed = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Asig(ei, ed, new Nodo(asig.linea(), asig.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Asig",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Invoc ::= Expresion PAPERTURA PReales PCIERRE PUNTO_COMA 
            {
              Ins RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp eid = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int parentesisleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parentesisright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Strloc parentesis = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int prealesleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int prealesright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Exp> preales = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Invoc(eid, preales, new Nodo(parentesis.linea(), parentesis.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Invoc",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Condicional ::= IF Expresion THEN LIns ElseOpc END PuntoComaOpc 
            {
              Ins RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Strloc i = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int linsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int linsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List<Ins> lins = (List<Ins>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lins2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lins2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Optional<List<Ins>> lins2 = (Optional<List<Ins>>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Nodo nodo = new Nodo(i.linea(), i.col());
    List<Ins> linsInmutable = Collections.unmodifiableList(lins);
    RESULT =
        lins2.isPresent()? new IfThenElse(exp, linsInmutable, Collections.unmodifiableList(lins2.get()), nodo):
        new IfThen(exp, linsInmutable, nodo);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Condicional",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ElseOpc ::= 
            {
              Optional<List<Ins>> RESULT =null;
		 RESULT = Optional.empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseOpc",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ElseOpc ::= ELSE LIns 
            {
              Optional<List<Ins>> RESULT =null;
		int linsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int linsright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List<Ins> lins = (List<Ins>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Optional.of(lins); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ElseOpc",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // While ::= WHILE Expresion DO LIns END PuntoComaOpc 
            {
              Ins RESULT =null;
		int whleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int whright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Strloc wh = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int linsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int linsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Ins> lins = (List<Ins>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new While(exp, Collections.unmodifiableList(lins), new Nodo(wh.linea(), wh.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("While",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PuntoComaOpc ::= 
            {
              Optional<Strloc> RESULT =null;
		 RESULT = Optional.empty(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PuntoComaOpc",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PuntoComaOpc ::= PUNTO_COMA 
            {
              Optional<Strloc> RESULT =null;
		int puntoComaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int puntoComaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc puntoComa = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Optional.of(puntoComa); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PuntoComaOpc",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Compuesta ::= SEQ SeccionDecs SeccionIns PuntoComaOpc 
            {
              Ins RESULT =null;
		int seqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int seqright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Strloc seq = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int decsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int decsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Dec> decs = (List<Dec>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Ins> ins = (List<Ins>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Seq(decs, ins, new Nodo(seq.linea(), seq.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Compuesta",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Lectura ::= READ Expresion PUNTO_COMA 
            {
              Ins RESULT =null;
		int readleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int readright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc read = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Read(exp, new Nodo(read.linea(), read.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Lectura",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Escritura ::= WRITE Expresion PUNTO_COMA 
            {
              Ins RESULT =null;
		int writeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int writeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc write = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Write(exp, new Nodo(write.linea(), write.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Escritura",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NewLine ::= NL PUNTO_COMA 
            {
              Ins RESULT =null;
		int nlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc nl = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new NewLine(new Nodo(nl.linea(), nl.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NewLine",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // New ::= NEW Expresion PUNTO_COMA 
            {
              Ins RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc n = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new New(exp, new Nodo(n.linea(), n.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("New",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Delete ::= DELETE Expresion PUNTO_COMA 
            {
              Ins RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc d = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Delete(exp, new Nodo(d.linea(), d.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Delete",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PReales ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = List.of(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PReales",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PReales ::= LReal PReal 
            {
              List<Exp> RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Exp> lexp = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int prealleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int prealright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp preal = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    lexp.add(preal);
    RESULT = Collections.unmodifiableList(lexp);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("PReales",34, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // LReal ::= 
            {
              List<Exp> RESULT =null;
		 RESULT = new ArrayList<Exp>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("LReal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LReal ::= LReal PReal COMA 
            {
              List<Exp> RESULT =null;
		int lexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Exp> lexp = (List<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prealleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prealright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp preal = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    lexp.add(preal);
    RESULT = lexp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("LReal",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PReal ::= Expresion 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PReal",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Expresion ::= ExpNivel0 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expresion",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExpNivel0 ::= ExpBinaria0 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ExpNivel0 ::= ExpNivel1 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel0",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ExpBinaria0 ::= ExpNivel1 OP_RELACIONAL ExpNivel1 
            {
              Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp op0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc op = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(op.linea(), op.col());

    RESULT = switch (op.str())
    {
        case "==" -> new Eq(op0, op1, nodo);
        case "!=" -> new Ne(op0, op1, nodo);
        case "<=" -> new Le(op0, op1, nodo);
        case ">=" -> new Ge(op0, op1, nodo);
        case "<" -> new Lt(op0, op1, nodo);
        default -> new Gt(op0, op1, nodo); /* case ">" */
    };

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBinaria0",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ExpNivel1 ::= MasBinario 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ExpNivel1 ::= MenosBinario 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ExpNivel1 ::= ExpNivel2 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel1",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // MasBinario ::= ExpNivel2 SUMA ExpNivel2 
            {
              Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp op0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sumaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sumaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc suma = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Suma(op0, op1, new Nodo(suma.linea(), suma.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MasBinario",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // MenosBinario ::= ExpNivel1 RESTA ExpNivel2 
            {
              Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp op0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int restaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc resta = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Resta(op0, op1, new Nodo(resta.linea(), resta.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MenosBinario",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ExpNivel2 ::= And 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExpNivel2 ::= Or 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExpNivel2 ::= ExpNivel3 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel2",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // And ::= ExpNivel3 AND ExpNivel3 
            {
              Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp op0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int andleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int andright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc and = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new And(op0, op1, new Nodo(and.linea(), and.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("And",48, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Or ::= ExpNivel3 OR ExpNivel2 
            {
              Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp op0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int orleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int orright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc or = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Or(op0, op1, new Nodo(or.linea(), or.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Or",49, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // ExpNivel3 ::= ExpBinaria3 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ExpNivel3 ::= ExpNivel4 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel3",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ExpBinaria3 ::= ExpNivel3 MUL ExpNivel4 
            {
              Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp op0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mulleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mulright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc mul = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mul(op0, op1, new Nodo(mul.linea(), mul.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBinaria3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ExpBinaria3 ::= ExpNivel3 DIV ExpNivel4 
            {
              Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp op0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc div = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Div(op0, op1, new Nodo(div.linea(), div.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBinaria3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ExpBinaria3 ::= ExpNivel3 MOD ExpNivel4 
            {
              Exp RESULT =null;
		int op0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp op0 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int modleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int modright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc mod = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op1 = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Mod(op0, op1, new Nodo(mod.linea(), mod.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBinaria3",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ExpNivel4 ::= ExpUnaria4 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExpNivel4 ::= ExpNivel5 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel4",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExpUnaria4 ::= RESTA ExpNivel5 
            {
              Exp RESULT =null;
		int restaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int restaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc resta = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Neg(op, new Nodo(resta.linea(), resta.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria4",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ExpUnaria4 ::= NOT ExpNivel5 
            {
              Exp RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int notright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc not = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp op = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Not(op, new Nodo(not.linea(), not.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpUnaria4",50, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExpNivel5 ::= ExpParentizada 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel5",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExpNivel5 ::= ExpPosfija 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel5",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExpNivel5 ::= ExpBasica 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpNivel5",51, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExpBasica ::= ENTERO 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc lit = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Entero(lit.str(), new Nodo(lit.linea(), lit.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBasica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExpBasica ::= REAL 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc lit = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Decimal(lit.str(), new Nodo(lit.linea(), lit.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBasica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExpBasica ::= CADENA 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc lit = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String str = lit.str();
    RESULT = new Cadena(str.substring(1, str.length() - 1), new Nodo(lit.linea(), lit.col()));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBasica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExpBasica ::= ID 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc lit = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Ident(lit.str(), new Nodo(lit.linea(), lit.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBasica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExpBasica ::= BOOLEANO 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc lit = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Nodo nodo = new Nodo(lit.linea(), lit.col());
    RESULT = switch (lit.str())
    {
        case "true" -> new True(nodo);
        default -> new False(nodo); /* case "false" */
    };

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBasica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExpBasica ::= NULO 
            {
              Exp RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc lit = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Nulo(new Nodo(lit.linea(), lit.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpBasica",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExpParentizada ::= PAPERTURA ExpNivel0 PCIERRE 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpParentizada",53, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExpPosfija ::= Indx 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpPosfija",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ExpPosfija ::= Acc 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpPosfija",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ExpPosfija ::= Indir 
            {
              Exp RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExpPosfija",52, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Indx ::= ExpNivel5 CAPERTURA Expresion CCIERRE 
            {
              Exp RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Exp eid = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int corcheteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int corcheteright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Strloc corchete = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp ei = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Indx(eid, ei, new Nodo(corchete.linea(), corchete.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Indx",54, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // Acc ::= ExpNivel5 PUNTO ID 
            {
              Exp RESULT =null;
		int eidleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eidright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Exp eid = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int puntoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int puntoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Strloc punto = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc id = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Acc(eid, id.str(), new Nodo(punto.linea(), punto.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Acc",56, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // Indir ::= ExpNivel5 PUNTERO 
            {
              Exp RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Exp et = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int indirleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int indirright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Strloc indir = (Strloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Indir(et, new Nodo(indir.linea(), indir.col())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Indir",55, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
