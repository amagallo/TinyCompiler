/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoConstants.java */
package procesamientos;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorSintacticoConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int separador = 1;
  /** RegularExpression Id. */
  int blanco = 2;
  /** RegularExpression Id. */
  int comentario = 3;
  /** RegularExpression Id. */
  int var = 4;
  /** RegularExpression Id. */
  int tipo = 5;
  /** RegularExpression Id. */
  int proc = 6;
  /** RegularExpression Id. */
  int tipoBasico = 7;
  /** RegularExpression Id. */
  int of = 8;
  /** RegularExpression Id. */
  int array = 9;
  /** RegularExpression Id. */
  int registro = 10;
  /** RegularExpression Id. */
  int puntero = 11;
  /** RegularExpression Id. */
  int asignacion = 12;
  /** RegularExpression Id. */
  int ifSimbolo = 13;
  /** RegularExpression Id. */
  int then = 14;
  /** RegularExpression Id. */
  int elseSimbolo = 15;
  /** RegularExpression Id. */
  int whileSimbolo = 16;
  /** RegularExpression Id. */
  int doSimbolo = 17;
  /** RegularExpression Id. */
  int read = 18;
  /** RegularExpression Id. */
  int write = 19;
  /** RegularExpression Id. */
  int nl = 20;
  /** RegularExpression Id. */
  int newSimbolo = 21;
  /** RegularExpression Id. */
  int delete = 22;
  /** RegularExpression Id. */
  int seq = 23;
  /** RegularExpression Id. */
  int begin = 24;
  /** RegularExpression Id. */
  int end = 25;
  /** RegularExpression Id. */
  int booleano = 26;
  /** RegularExpression Id. */
  int nulo = 27;
  /** RegularExpression Id. */
  int opRelacional = 28;
  /** RegularExpression Id. */
  int suma = 29;
  /** RegularExpression Id. */
  int resta = 30;
  /** RegularExpression Id. */
  int mul = 31;
  /** RegularExpression Id. */
  int div = 32;
  /** RegularExpression Id. */
  int mod = 33;
  /** RegularExpression Id. */
  int and = 34;
  /** RegularExpression Id. */
  int or = 35;
  /** RegularExpression Id. */
  int not = 36;
  /** RegularExpression Id. */
  int parentesisApertura = 37;
  /** RegularExpression Id. */
  int parentesisCierre = 38;
  /** RegularExpression Id. */
  int corcheteApertura = 39;
  /** RegularExpression Id. */
  int corcheteCierre = 40;
  /** RegularExpression Id. */
  int puntoComa = 41;
  /** RegularExpression Id. */
  int coma = 42;
  /** RegularExpression Id. */
  int dosPuntos = 43;
  /** RegularExpression Id. */
  int punto = 44;
  /** RegularExpression Id. */
  int letra = 45;
  /** RegularExpression Id. */
  int digitoPositivo = 46;
  /** RegularExpression Id. */
  int digito = 47;
  /** RegularExpression Id. */
  int entero = 48;
  /** RegularExpression Id. */
  int real = 49;
  /** RegularExpression Id. */
  int decimal = 50;
  /** RegularExpression Id. */
  int exponencial = 51;
  /** RegularExpression Id. */
  int identificador = 52;
  /** RegularExpression Id. */
  int cadena = 53;
  /** RegularExpression Id. */
  int caracterImprimible = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<separador>",
    "\" \"",
    "<comentario>",
    "\"var\"",
    "\"type\"",
    "\"proc\"",
    "<tipoBasico>",
    "\"of\"",
    "\"array\"",
    "\"record\"",
    "\"^\"",
    "\"=\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\"read\"",
    "\"write\"",
    "\"nl\"",
    "\"new\"",
    "\"delete\"",
    "\"seq\"",
    "\"begin\"",
    "\"end\"",
    "<booleano>",
    "\"null\"",
    "<opRelacional>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"and\"",
    "\"or\"",
    "\"not\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\".\"",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<entero>",
    "<real>",
    "<decimal>",
    "<exponencial>",
    "<identificador>",
    "<cadena>",
    "<caracterImprimible>",
  };

}
